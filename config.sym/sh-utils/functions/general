#!/bin/bash

# check if an executable exists e.g. command_exists git
commandexists() {
  type "$1" &> /dev/null ;
}

# set the system profile theme to day or night mode
setprof() {
  # do things differently on osx and linux
  if [[ $(findcurrentos) == "OSX" ]]; then
    # set the iTerm theme
    echo -e "\\033]50;SetProfile=$1\\a";

    # set dock and menubar theme
    if [[ "$1" == "day" ]]; then
      osascript -e 'tell application "System Events"
      tell appearance preferences to set dark mode to false
      end tell'
    else
      osascript -e 'tell application "System Events"
      tell appearance preferences to set dark mode to true
      end tell'
    fi
  else
    echo "Not implemented for non-OSX systems yet!"
  fi
}

# `v` with no arguments opens `pwd` in vim otherwise opens location
v() {
  if [ $# -eq 0 ]; then
    vim
  else
    vim "$@"
  fi
}

# list users on the system
listusers() {
  cut -d: -f1 /etc/passwd
}

# htop current user, else htop 1st argv
utop() {
  if [ $# -eq 0 ]; then
    htop -u "$USER"
  else
    htop -u "$1"
  fi
}

# disable crontab -r
crontab() {
  # replace -r with -e
  /usr/bin/crontab "${@/-r/-e}"
}

# add current user to specified groups
joingroup() {
  for group in "$@"; do
    sudo gpasswd -a "$USER" "$group"
  done
}

# del user from specified groups
leavegroup() {
  for group in "$@"; do
    sudo gpasswd -d "$USER" "$group"
  done
}

# coloured man pages
man() {
  LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    command man "$@"
}

# search the aur for a pkg using cower
aursearch() {
  cower -s "$1"
}

# download from aur using cower to $HOME/tmp
aurdl() {
  cd "$HOME"/tmp || exit
  cower -d "$1" && cd "$1" || exit
}

# list tmux sessions
tl() {
  tmux list-sessions
}

# create a tmux session with a name corresponding to 1st argv
tc() {
  tmux new -s "$1"
}

# attach to tmux session with name corresponding to 1st argv
ta() {
  tmux attach -t "$1"
}

# simple calculator
calc() {
  local result=""
  result="$(printf "scale=10;%s\\n" "$*" | bc --mathlib | tr -d '\\\n')"

  if [[ "$result" == *.* ]]; then
    # improve the output for decimal numbers
    # add "0" for cases like ".5"
    # add "0" for cases like "-.5"
    # remove trailing zeros
    printf "%s" "$result" |
    sed -e 's/^\./0./'  \
      -e 's/^-\./-0./' \
      -e 's/0*$//;s/\.$//'
  else
    printf "%s" "$result"
  fi
  printf "\\n"
}

# create a new directory and enter it
mkd() {
  mkdir -p "$@"
  cd "$@" || exit
}

# make a temporary directory and enter it
tmpd() {
  local dir
  if [ $# -eq 0 ]; then
    dir=$(mktemp -d)
  else
    dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
  fi
  cd "$dir" || exit
}

# determine size of a file or total size of a directory
fs() {
  if du -b /dev/null > /dev/null 2>&1; then
    local arg=-sbh
  else
    local arg=-sh
  fi
  if [[ -n "$*" ]]; then
    du $arg -- "$@"
  else
    du $arg -- .[^.]* *
  fi
}

# shorthand for `tree` hiddenfiles and colour enabled, ignores .git, directories first, piped into less if output too big
tre() {
  tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
}

# check if website is up
isup() {
  local uri=$1

  if curl -s --head  --request GET "$uri" | grep "200 OK" > /dev/null ; then
    notify-send --urgency=critical "$uri is down"
  else
    notify-send --urgency=low "$uri is up"
  fi
}

# open a new sh file in vim and +x it
mksh() {
  filename=sh_$(date +%H%M%S)
  if [ $# -eq 0 ]; then
    echo "#!/bin/bash" >> "$filename"
    chmod +x "$filename"
    vi "$filename"
  else
    echo "#!/bin/bash" >> "$1"
    chmod +x "$1";
    vi "$1"
  fi
}

# attempt find the current operating system
findcurrentos() {
  local DISTRO="";
  local os_type="";

  os_type=$(uname);
  case "$os_type" in
    "Darwin") {
      echo "OSX"
    } ;;
  "Linux") {
    # If available, use LSB to identify distribution
    if [ -f /etc/lsb-release ] || [ -d /etc/lsb-release.d ]; then
      DISTRO=$(awk -F= '/^NAME/{print $2}' /etc/os-release)
    else
      DISTRO=$(echo /etc/[A-Za-z]*[_-][rv]e[lr]* | grep -v "lsb" | cut -d'/' -f3 | cut -d'-' -f1 | cut -d'_' -f1)
    fi
    echo "$DISTRO" | tr '[:lower:]' '[:upper:]'
  } ;;
*) {
  echo "UNKNOWN"
} ;;
  esac;
}

# search Google
googlesearch() {
  Q="$*"
  GOOG_URL='https://www.google.co.uk/search?tbs=li:1&q='
  AGENT="Mozilla/4.0"
  stream=$(curl -A "$AGENT" -skLm 50 "${GOOG_URL}${Q//\ /+}" | grep -oP '\/url\?q=.+?&amp' | sed 's|/url?q=||; s|&amp||')
  echo -e "${stream//\%/\x}"
}

# check if website is up
down4me() {
  curl -s "downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g';
}

# run $2 $1 times
runx() {
  n=$1
  shift
  while [ $(( n -= 1 )) -ge 0 ]
  do
    "$@"
  done
}

# search stackoverflow
stackoverflow() {
  s=""
  for term in "$@"; do
    s="$s%20$term"
  done
  w3m "http://stackoverflow.com/search?q=$s"
}

# open 1st argv in google chrome
openchrome() {
  open -a "Google Chrome" "http://$1"
}

# youtube-dl full 1080p video/audio
youtubedlhd() {
  youtube-dl "$1" -f 137+140
}

# extract audio in mp3 format
youtubedlmp3() {
  youtube-dl -v --no-mtime -o '%(stitle)s.%(ext)s' --extract-audio --audio-format mp3  "$1"
}

# stopwatch
stopwatch() {
  my_date=$(date +%s)
  while true; do
    days=$(( $(($(date +%s) - my_date)) / 86400 ))
    echo -ne "$days day(s) and $(date -u --date @$(($(date +%s) - my_date)) +%H:%M:%S)\\r"
    sleep 0.1
  done
}

# take a note
createnote() {
  # if file doesn't exist, create it
  if [[ ! -f $HOME/.notes ]]; then
    touch "$HOME/.notes"
  fi

  if ! (($#)); then
    # no arguments, print file
    cat "$HOME/.notes"
  elif [[ "$1" == "-c" || "$1" == "--clear" ]]; then
    # clear file
    printf "" > "$HOME/.notes"
  else
    # add all arguments to file
    printf "- %s\\n" "$*" >> "$HOME/.notes"
  fi
}

# open default tmux or attach, if we're in a session already then use fzf to switch between them
tm() {
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ "$1" ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s "$1" && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# generic extract
extract() {
  case $1 in
    *.tar.gz) tar -xf "$1";;
    *.tgz) tar -xzf "$1";;
    *.bz2) tar jxf "$1";;
    *.tar) tar 0xvf "$1";;
    *.zip) unzip "$1";;
    *.rar) unrar e "$1";;
    *.7z) 7z x "$1";;
    *.gz) tar -xvzf "$1";;
    *) echo "Nothing to do";;
  esac
}

# connect external monitor
connectmonitor() {
  if [[ $1 == 'off' ]]; then
    xrandr --output LVDS1 --size 1366x768 && xrandr --output HDMI1 --off
  elif [[ $1 == 'on' ]]; then
    xrandr --output LVDS1 --off && xrandr --output HDMI1 --size 3440x1440
  else
    echo "Unrecognised option" && exit 1
  fi
}

# create a paste
pastebin() {
  curl -F c=@- https://ptpb.pw
}

# list current jails in fail2ban
listjails() {
  sudo fail2ban-client status
}

# list status of jail in fail2ban
f2bstatus() {
  jail_name="$1"
  if [[ -n "$jail_name" ]]; then
    sudo fail2ban-client status "$jail_name"
  else
    echo -e "Missing param - Usage:\\n - f2bstatus [jail name]"
  fi
}

# unban an ip banned by fail2ban
f2bunban() {
  jail_name="$1"
  ip="$2"
  if [[ -n "$jail_name" || -n "$ip" ]]; then
    sudo fail2ban-client set "$jail_name" unbanip "$ip"
  else
    echo -e "Missing param - Usage:\\n- f2bunban [jail name] [ip]\\nUse listjails and f2bstatus to see bans and jails"
  fi
}

# watch TCP/UDP etc. connections every 2 seconds
watchconnections() {
  watch ss -stplu
}

# list running services if we have `service` available, otherwise use systemctl
listrunningservices() {
  if commandexists service; then
    sudo service --status-all | grep '+'
  else
    sudo systemctl -r --type service --all | grep " active"
  fi
}

# make a package from aur
mpack() {
  makepkg -s
}

# install a package that has already been built from aur
ipack() {
  makepkg -i
}

# look at dmesg output every second
watchkern() {
  watch -n1 'dmesg | tail'
}

# log into lastpass via command-line tool lpass
lpl() {
  lpass login "$1"
}

