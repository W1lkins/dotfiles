#!/bin/bash
# shellcheck source=/dev/null

# check if an executable exists e.g. command_exists git
commandexists() {
    type "$1" &> /dev/null ;
}

# list users on the system
listusers() {
    cut -d: -f1 /etc/passwd
}

# htop current user, else htop 1st argv
utop() {
    if [ $# -eq 0 ]; then
        htop -u "$USER"
    else
        htop -u "$1"
    fi
}

# disable crontab -r
crontab() {
    # replace -r with -e
    /usr/bin/crontab "${@/-r/-e}"
}

# add current user to specified groups
joingroup() {
    for group in "$@"; do
        sudo gpasswd -a "$USER" "$group"
    done
}

# del user from specified groups
leavegroup() {
    for group in "$@"; do
        sudo gpasswd -d "$USER" "$group"
    done
}

# coloured man pages
man() {
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    command man "$@"
}

# list tmux sessions
tl() {
    tmux -f ~/.config/tmux/tmux.conf list-sessions
}

# create a tmux session with a name corresponding to 1st argv
tc() {
    tmux -f ~/.config/tmux/tmux.conf new -s "$1"
}

# attach to tmux session with name corresponding to 1st argv
ta() {
    tmux -f ~/.config/tmux/tmux.conf attach -t "$1"
}

# create a new directory and enter it
mkd() {
    mkdir -p "$@"
    cd "$@" || return
}

# make a temporary directory and enter it
tmpd() {
    local dir
    if [ $# -eq 0 ]; then
        dir=$(mktemp -d)
    else
        dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
    fi
    cd "$dir" || return
}

# open default tmux or attach, if we're in a session already then use fzf to switch between them
tm() {
    [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
    if [ "$1" ]; then
        tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s "$1" && tmux $change -t "$1"); return
    fi
    session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

# generic extract
extract() {
    case $1 in
        *.tar.gz) tar -xf "$1";;
        *.tgz) tar -xzf "$1";;
        *.bz2) tar jxf "$1";;
        *.tar) tar 0xvf "$1";;
        *.zip) unzip "$1";;
        *.rar) unrar e "$1";;
        *.7z) 7z x "$1";;
        *.gz) tar -xvzf "$1";;
        *.xz) tar -xf "$1";;
        *) echo "Nothing to do";;
    esac
}

# list current jails in fail2ban
listjails() {
    sudo fail2ban-client status
}

# list status of jail in fail2ban
f2bstatus() {
    jail_name="$1"
    if [[ -n "$jail_name" ]]; then
        sudo fail2ban-client status "$jail_name"
    else
        echo -e "Missing param - Usage:\\n - f2bstatus [jail name]"
    fi
}

# unban an ip banned by fail2ban
f2bunban() {
    jail_name="$1"
    ip="$2"
    if [[ -n "$jail_name" || -n "$ip" ]]; then
        sudo fail2ban-client set "$jail_name" unbanip "$ip"
    else
        echo -e "Missing param - Usage:\\n- f2bunban [jail name] [ip]\\nUse listjails and f2bstatus to see bans and jails"
    fi
}

# watch TCP/UDP etc. connections every 2 seconds
watchconnections() {
    watch ss -stplu
}

# list running services if we have `service` available, otherwise use systemctl
listrunningservices() {
    if commandexists service; then
        sudo service --status-all | grep '+'
    else
        sudo systemctl -r --type service --all | grep " active"
    fi
}

# show terminal colors
tcolors() {
    for i in {0..255};
        do printf "\\x1b[38;5;${i}mcolor%-5i\\x1b[0m" $i;
        if ! (( (i + 1 ) % 8 )); then
        echo;
        fi;
    done
}

# check ip
checkip() {
    curl -fsSL ip.wilkins.tech | sed 's/[a-zA-Z<>/ :]//g'
}

# re-source the terminal
src() {
    source ~/.zshrc
}

# make CTRL-Z background things and unbackground them.
fg-bg() {
    if [[ $#BUFFER -eq 0 ]]; then
        fg
    else
        zle push-input
    fi
}

# remove a repository from apt
remove-apt-repository() {
    sudo add-apt-repository -r "$1"
}

# use icdiff if it exists else fall back to normal diff
diff() {
    if commandexists icdiff; then
        icdiff "$@"
    else
        diff "$@"
    fi
}

# v with no arguments opens CWD in vim otherwise opens location
v() {
    if [ $# -eq 0 ]; then
        $EDITOR
    else
        $EDITOR "$@"
    fi
}
