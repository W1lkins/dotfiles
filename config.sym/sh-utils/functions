#!/bin/bash

# source our docker funcs
# shellcheck source=/dev/null
source "$HOME/.docker/docker.functions"

# check if an executable exists e.g. command_exists git
command_exists () {
    type "$1" &> /dev/null ;
}

# `v` with no arguments opens `pwd` in vim otherwise opens location
v() {
	if [ $# -eq 0 ]; then
        # if we have fzf installed, use it else open cwd
        if command_exists fzf; then
            vim "$(fzf)"
        else
            vim .
        fi
	else
		vim "$@"
	fi
}

# make a note with an argv filename, else note_$(time)
mknote() {
    filename=note_$(date +%H%M%S)
    if [ $# -eq 0 ]; then
        touch "$filename"
        $EDITOR "$filename"
    else
        touch "$1"
        $EDITOR "$1"
    fi
}

# list users on the system
listusers() {
    cut -d: -f1 /etc/passwd
}

# htop current user, else htop 1st argv
utop() {
    if [ $# -eq 0 ]; then
        htop -u "$USER"
    else
        htop -u "$1"
    fi
}

# disable crontab -r
crontab() {
    # replace -r with -e
    /usr/bin/crontab "${@/-r/-e}"
}

# add current user to specified groups
joingroup() {
    for group in "$@"; do
        sudo gpasswd -a "$USER" "$group"
    done
}

# del user from specified groups
leavegroup() {
    for group in "$@"; do
        sudo gpasswd -d "$USER" "$group"
    done
}

# coloured man pages
man() {
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    command man "$@"
}

# search the aur for a pkg using cower
aursearch() {
    cower -s "$1"
}

# download from aur using cower to ~$USER/tmp
aurdl() {
    cd /home/"$USER"/tmp || exit;
    cower -d "$1"
}

# pull from git, add everything, and commit with first argv
gitshove() {
    gpull;
    ga;
    git commit -m "$1";
}

# create a tmux session with a name corresponding to 1st argv
tc() {
    tmux new -s "$1"
}

# attach to tmux session with name corresponding to 1st argv
ta() {
    tmux attach -t "$1"
}

# simple calculator
calc() {
	local result=""
	result="$(printf "scale=10;%s\n" "$*" | bc --mathlib | tr -d '\\\n')"
	#						└─ default (when `--mathlib` is used) is 20

	if [[ "$result" == *.* ]]; then
		# improve the output for decimal numbers
		# add "0" for cases like ".5"
		# add "0" for cases like "-.5"
		# remove trailing zeros
		printf "%s" "$result" |
		sed -e 's/^\./0./'  \
			-e 's/^-\./-0./' \
			-e 's/0*$//;s/\.$//'
	else
		printf "%s" "$result"
	fi
	printf "\n"
}

# create a new directory and enter it
mkd() {
	mkdir -p "$@"
	cd "$@" || exit
}

# make a temporary directory and enter it
tmpd() {
	local dir
	if [ $# -eq 0 ]; then
		dir=$(mktemp -d)
	else
		dir=$(mktemp -d -t "${1}.XXXXXXXXXX")
	fi
	cd "$dir" || exit
}

# determine size of a file or total size of a directory
fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg -- .[^.]* *
	fi
}

# shorthand for `tree` hiddenfiles and colour enabled, ignores .git, directories first, piped into less if output too big
tre() {
	tree -aC -I '.git' --dirsfirst "$@" | less -FRNX
}

# check if website is up
isup() {
	local uri=$1

	if curl -s --head  --request GET "$uri" | grep "200 OK" > /dev/null ; then
		notify-send --urgency=critical "$uri is down"
	else
		notify-send --urgency=low "$uri is up"
	fi
}

# open a new sh file in vim and +x it
mksh() {
    filename=sh_$(date +%H%M%S)
    if [ $# -eq 0 ]; then
        echo "#!/bin/bash" >> "$filename"
        chmod +x "$filename"
        vi "$filename"
	else
        echo "#!/bin/bash" >> "$1"
        chmod +x "$1";
        vi "$1"
	fi
}

# attempt find the current operating system
findcurrentos() {
    local DISTRO="";
    local os_type="";

    os_type=$(uname);
    case "$os_type" in
            "Darwin") {
                echo "OSX"
            } ;;
            "Linux") {
                # If available, use LSB to identify distribution
                if [ -f /etc/lsb-release ] || [ -d /etc/lsb-release.d ]; then
                    DISTRO=$(awk -F= '/^NAME/{print $2}' /etc/os-release)
                else
                    DISTRO=$(ls -d /etc/[A-Za-z]*[_-][rv]e[lr]* | grep -v "lsb" | cut -d'/' -f3 | cut -d'-' -f1 | cut -d'_' -f1)
                fi
                echo "$DISTRO" | tr 'a-z' 'A-Z'
            } ;;
            *) {
                echo "UNKNOWN"
            } ;;
    esac;
}
